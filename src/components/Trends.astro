---
import { trendingSearches } from '../utils/data/data';
import { IconChevronLeft, IconChevronRight } from './icons/react/outline';
---

<div class="mt-3 relative">
    <div class="absolute left-0 top-0 pr-6 z-10 bg-gradient-to-r from-black via-black">
        <button id="scroll-left" type="button" class="hidden py-2.5 h-full" aria-label="Scroll Left">  
            <IconChevronLeft strokeWidth="4" className="w-5 h-5 stroke-neutral-400 hover:stroke-white"/>
        </button>
    </div>
    <div id="scroll-container" class="overflow-x-auto touch-pan-x hide-scroll">
        <ul class="inline-flex items-center space-x-2 xs:space-x-3 whitespace-nowrap list-none text-sm text-white">
            {trendingSearches?.map((trending) => (
                <li>
                    <a href={`search?search=${trending.href}`} class="block py-2 px-3.5 rounded-full border-2 border-neutral-800 bg-neutral-900 transition ease-in-out hover:bg-neutral-800 duration-300 cursor-pointer">
                        {trending.trend}                           
                    </a>
                </li>
            ))}
        </ul>
    </div>
    <div class="absolute right-0 top-0 pl-6 z-10 bg-gradient-to-l from-black via-black">
        <button id="scroll-right" type="button" class="hidden py-2.5 h-full" aria-label="Scroll Right">
            <IconChevronRight strokeWidth="4" className="w-5 h-5 stroke-neutral-400 hover:stroke-white"/>              
        </button>
    </div>
</div>

<script>
    const scrollContainer = document.getElementById('scroll-container') as HTMLDivElement;
    const scrollLeftButton = document.getElementById('scroll-left') as HTMLButtonElement;
    const scrollRightButton = document.getElementById('scroll-right') as HTMLButtonElement;

    const updateButtonVisibility = () => {
        const { scrollLeft, scrollWidth, clientWidth } = scrollContainer;
        scrollLeftButton.classList.toggle('hidden', scrollLeft === 0);
        scrollRightButton.classList.toggle('hidden', scrollLeft + clientWidth >= scrollWidth - 1);
    };

    const scrollByAmount = (amount: number) => {
        scrollContainer.scrollBy({ left: amount, behavior: 'smooth' });
    };

    scrollLeftButton.addEventListener('click', () => scrollByAmount(-scrollContainer.clientWidth / 2));
    scrollRightButton.addEventListener('click', () => scrollByAmount(scrollContainer.clientWidth / 2));

    const debounce = (func: Function, wait: number) => {
        let timeout: number;
        return (...args: []) => {
            clearTimeout(timeout);
            timeout = setTimeout(() => func.apply(this, args), wait);
        };
    };

    window.addEventListener('resize', debounce(updateButtonVisibility, 200));
    scrollContainer.addEventListener('scroll', updateButtonVisibility);

    updateButtonVisibility();
</script>

