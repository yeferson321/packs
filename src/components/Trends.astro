---
interface Props { 
    trends: string[]
}

const { trends } = Astro.props;
---

<div class="space-y-3">
    <div class="inline-flex items-center">
        <h1 class="text-white text-lg font-medium">Packs calientes a nivel internacional</h1>
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 ms-3 stroke-blue-500" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" d="m6.115 5.19.319 1.913A6 6 0 0 0 8.11 10.36L9.75 12l-.387.775c-.217.433-.132.956.21 1.298l1.348 1.348c.21.21.329.497.329.795v1.089c0 .426.24.815.622 1.006l.153.076c.433.217.956.132 1.298-.21l.723-.723a8.7 8.7 0 0 0 2.288-4.042 1.087 1.087 0 0 0-.358-1.099l-1.33-1.108c-.251-.21-.582-.299-.905-.245l-1.17.195a1.125 1.125 0 0 1-.98-.314l-.295-.295a1.125 1.125 0 0 1 0-1.591l.13-.132a1.125 1.125 0 0 1 1.3-.21l.603.302a.809.809 0 0 0 1.086-1.086L14.25 7.5l1.256-.837a4.5 4.5 0 0 0 1.528-1.732l.146-.292M6.115 5.19A9 9 0 1 0 17.18 4.64M6.115 5.19A8.965 8.965 0 0 1 12 3c1.929 0 3.716.607 5.18 1.64" />
        </svg>         
    </div>
    <div class="relative">
        <div class="absolute left-0 top-0 pr-6 z-10 bg-gradient-to-r from-black via-black">
            <button id="scroll-left" type="button" class="hidden py-2.5 h-full" aria-label="Scroll Left">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="4" stroke="currentColor" class="w-5 h-5 stroke-neutral-400 hover:stroke-white" aria-hidden="true">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5 8.25 12l7.5-7.5" />
                </svg>   
            </button>
        </div>
        <div id="scroll-container" class="overflow-x-auto touch-pan-x hide-scroll">
            <ul class="inline-flex items-center space-x-2 xs:space-x-3 whitespace-nowrap list-none">
                {trends.map((trend) => (
                    <li>
                        <a href={`search?search=${trend}`} class="block py-2 px-3.5 rounded-full border-2 border-neutral-800 text-white text-sm bg-neutral-900 transition ease-in-out hover:bg-neutral-800 duration-300 cursor-pointer">
                            {trend}                           
                        </a>
                    </li>
                ))}
            </ul>
        </div>
        <div class="absolute right-0 top-0 pl-6 z-10 bg-gradient-to-l from-black via-black">
            <button id="scroll-right" type="button" class="hidden py-2.5 h-full" aria-label="Scroll Right">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="4" stroke="currentColor" class="w-5 h-5 stroke-neutral-400 hover:stroke-white" aria-hidden="true">
                    <path stroke-linecap="round" stroke-linejoin="round" d="m8.25 4.5 7.5 7.5-7.5 7.5" />
                </svg>                  
            </button>
        </div>
    </div>
</div>

<style>
    .hide-scroll {
        -webkit-overflow-scrolling: touch;
        scrollbar-width: none;
        -ms-overflow-style: none; /* Hide scrollbar in IE and Edge */
    };

    .hide-scroll::-webkit-scrollbar {
        display: none; /* Hide the scroll bar in WebKit-based browsers */
    };
</style>

<script>
    const scrollContainer = document.getElementById('scroll-container') as HTMLElement;
    const scrollLeftButton = document.getElementById('scroll-left') as HTMLButtonElement;
    const scrollRightButton = document.getElementById('scroll-right') as HTMLButtonElement;

    const updateButtonVisibility = () => {
        const { scrollLeft, scrollWidth, clientWidth } = scrollContainer;
        scrollLeftButton.classList.toggle('hidden', scrollLeft === 0);
        scrollRightButton.classList.toggle('hidden', scrollLeft + clientWidth >= scrollWidth - 1);
    };

    updateButtonVisibility();

    window.addEventListener('resize', updateButtonVisibility);
    scrollContainer.addEventListener('scroll', updateButtonVisibility);

    const scrollByAmount = (amount: number) => scrollContainer.scrollBy({ left: amount, behavior: 'smooth' });

    scrollLeftButton.addEventListener('click', () => scrollByAmount(-scrollContainer.clientWidth / 2));
    scrollRightButton.addEventListener('click', () => scrollByAmount(scrollContainer.clientWidth / 2));
</script>
